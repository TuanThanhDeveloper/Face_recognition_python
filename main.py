# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import csv
import pickle
from datetime import datetime

import face_recognition
import numpy as np
import cv2
import pyzbar.pyzbar as pyzbar
import requests
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal, pyqtSlot, Qt, QObject
from PyQt5.QtGui import QPixmap
from bs4 import BeautifulSoup

URL = "http://127.0.0.1:5000/"
with open('qrcode.csv') as file_read:
    csv_reader = csv.reader(file_read, delimiter=',')
    qr_code = [row[0] for row in csv_reader]
file_read.close()


def decode(im):
    decoded_Objects = pyzbar.decode(im)
    return decoded_Objects


def save(codes):
    with open('qrcode.csv', mode="w", newline='') as file_save:
        csv_write = csv.writer(file_save, delimiter=',')
        for code in codes:
            csv_write.writerow([code])
    file_save.close()


def get_data(response):
    page = BeautifulSoup(response.content, "html.parser")
    elem = page.find_all("p")
    icon = page.find_all("img", {"class": "icon_noti"})
    results = BeautifulSoup(str(elem), features="html.parser").get_text()
    results = results.replace("[", "")
    results = results.replace("]", "")
    results = results.split(".")
    if icon[0].get("src") == "/kbyt/img/ico_ok.png":
        results.append("OK")
    else:
        results.append("NOTOK")
    return results


def get_QR(code, state=0):
    URL_checkin = "https://qrcode.danang.gov.vn/kbyt/site/checkin.php"
    URL_checkout = "https://qrcode.danang.gov.vn/kbyt/site/checkout.php"

    # thay đổi pl_name, address, id, token theo từng tài khoản từng địa điểm tương ứng
    data = {
        "pl_name": "abc",
        "pl_address": "123 tesy",
        "pl_id": "6184856078973f00401268ff",
        "pl_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                    ".eyJ1aWQiOiI2MTg0ODU0ODBlNDgzODAwMmEwOWY2YjAiLCJyb2xlIjoib3duZXItcGxhY2UiLCJpYXQiOjE2MzYwNzU1ODAsImV4cCI6MTYzNjA3NTU4MH0.yWqJw9d90t5Ppx9jOdUeqOSVZkOxWctmOuai2076-CU",
        "ID": "{}".format(code)
    }
    if state == 0:
        response = requests.post(URL_checkin, data)
        results = get_data(response)
    else:
        response = requests.post(URL_checkout, data)
        results = get_data(response)
    return results


class QRThread(QThread):
    qr = pyqtSignal(list, name="qrcode")

    def __init__(self, codes):
        super().__init__()
        self.codes = codes

    def run(self):
        code_data = self.codes.data.decode("ascii")
        if code_data in qr_code:
            # thông tin check out
            result = get_QR(self.codes, state=1)
            self.qr.emit(result)
            if result[-1] == "OK":
                qr_code.remove(code_data)
        else:
            result = get_QR(self.codes)
            self.qr.emit(result)
            if result[-1] == "OK":
                qr_code.append(code_data)
        save(qr_code)


def predict(X_frame, knn_clf=None, model_path="trained_knn_model.clf", distance_threshold=0.4):
    """
    Recognizes faces in given image using a trained KNN classifier

    :param X_frame: frame to do the prediction on.
    :param knn_clf: (optional) a knn classifier object. if not specified, model_save_path must be specified.
    :param model_path: (optional) path to a pickled knn classifier. if not specified, model_save_path must be knn_clf.
    :param distance_threshold: (optional) distance threshold for face classification. the larger it is, the more chance
           of mis-classifying an unknown person as a known one.
    :return: a list of names and face locations for the recognized faces in the image: [(name, bounding box), ...].
        For faces of unrecognized persons, the name 'unknown' will be returned.
    """
    if knn_clf is None and model_path is None:
        raise Exception("Must supply knn classifier either thourgh knn_clf or model_path")

    # Load a trained KNN model (if one was passed in)
    if knn_clf is None:
        with open(model_path, 'rb') as f:
            knn_clf = pickle.load(f)

    X_face_locations = face_recognition.face_locations(X_frame)

    # If no faces are found in the image, return an empty result.
    if len(X_face_locations) == 0:
        return []

    # Find encodings for faces in the test image
    faces_encodings = face_recognition.face_encodings(X_frame, known_face_locations=X_face_locations)

    # Use the KNN model to find the best matches for the test face
    closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=1)
    are_matches = [closest_distances[0][i][0] <= distance_threshold for i in range(len(X_face_locations))]

    # Predict classes and remove classifications that aren't within the threshold
    return [(pred, loc) if rec else ("unknown", loc) for pred, loc, rec in
            zip(knn_clf.predict(faces_encodings), X_face_locations, are_matches)]


def PostToServer(frame, predictions):
    """
    Shows the face recognition results visually.

    :param frame: frame to show the predictions on
    :param predictions: results of the predict function
    :return opencv suited image to be fitting with cv2.imshow fucntion:    """
    for name, (top, right, bottom, left) in predictions:
        # enlarge the predictions for the full sized image.
        top *= 2
        right *= 2
        bottom *= 2
        left *= 2
        # Draw a box around the face using the Pillow module
        if name == "unknown":
            try:
                print("unknown")
                image_unknown = Image.open("Unknown/Unknown_picture.jpg")
                image_unknown.save('Unknown/Unknown_picture_previous.jpg')
                cv2.imwrite("Unknown/Unknown_picture.jpg", frame[top - 40:bottom + 20, left - 20:right + 50])
            except OSError:
                continue
        else:
            try:
                name = int(name)
                image_known = Image.open("Recognition/user_recognition.jpg")
                image_known.save("Recognition/user_recognition_previous.jpg")
                cv2.imwrite("Recognition/user_recognition.jpg", frame[top - 40:bottom + 20, left - 20:right + 50])
                response = requests.put(URL + f"log/{name}",
                                        data={"id_user": name, "day": f'{datetime.now().strftime("%d/%m/%Y")}',
                                              "time": f'{datetime.now().strftime("%X")}'})
                print(response.status_code)
            except ValueError or OSError:
                print("error")

            # Post to server
            # data_request = {'id': id_user}
            # URL = ""
            # token = ""
            # response = requests.post(URL + "Attendance/Employee", data=dumps(data_request),
            #                          headers={'Content-Type': 'application/json', 'Authorization': "bearer " + token})
            # if response =! 201:
            #     print("System faile")


class VideoThread(QThread):
    changePixmap = pyqtSignal(np.ndarray, name="video")
    changeID = pyqtSignal(str, name="id")
    changeName = pyqtSignal(str, name="name")
    changeStateQrcode = pyqtSignal(str, name="state")
    ChangeAge = pyqtSignal(int, name="age")
    ChangeSex = pyqtSignal(str, name="sex")

    def __init__(self):

        super().__init__()
        self.recognition = True
        self.qrcode = False

    def run(self):
        # capture from web cam
        cap = cv2.VideoCapture(0)
        process_this_frame = 0
        while True:
            ret, cv_img = cap.read()
            if ret:
                process_this_frame += 1
                if process_this_frame % 30 == 0 and self.recognition:
                    img = cv2.resize(cv_img, (0, 0), fx=0.5, fy=0.5)
                    predictions = predict(img)
                    PostToServer(cv_img, predictions)

                    if predictions:
                        for identify, *args in predictions:
                            self.changeID.emit(identify)
                            if identify != "unknown":
                                self.recognition = False
                                self.qrcode = True

                if process_this_frame % 40 == 0 and self.qrcode:
                    im = cv2.cvtColor(cv_img, cv2.COLOR_BGR2GRAY)
                    decodedObjects = decode(im)

                    for decodedObject in decodedObjects:
                        thread = QRThread(decodedObject)
                        thread.qr.connect(self.decode_qr)
                        thread.start()

                self.changePixmap.emit(cv_img)

    @pyqtSlot(list, name="qrcode")
    def decode_qr(self, result):
        self.changeStateQrcode.emit(result[0])
        self.qrcode = False
        self.recognition = True


class Ui_MainWindow(QObject):
    def __init__(self):
        super().__init__()
        self.central_widget = QtWidgets.QWidget(MainWindow)
        self.video = QtWidgets.QLabel(self.central_widget)
        self.user_picture = QtWidgets.QLabel(self.central_widget)
        self.label_name = QtWidgets.QLabel(self.central_widget)
        self.label_age = QtWidgets.QLabel(self.central_widget)
        self.label_sex = QtWidgets.QLabel(self.central_widget)
        self.label_id = QtWidgets.QLabel(self.central_widget)
        self.label_qrcode = QtWidgets.QLabel(self.central_widget)
        self.label_author = QtWidgets.QLabel(self.central_widget)
        self.textBrowser_noti = QtWidgets.QTextBrowser(self.central_widget)
        self.thread = VideoThread()

    def setupUi(self, Main_Window):
        Main_Window.setObjectName("MainWindow")
        Main_Window.resize(1200, 820)
        Main_Window.setMaximumHeight(820)
        Main_Window.setMinimumHeight(820)
        Main_Window.setMaximumWidth(1200)
        Main_Window.setMinimumWidth(1200)
        Main_Window.setStyleSheet("QWidget {\n"
                                  "    background-color: #121313;\n"
                                  "}")

        # Font
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(15)

        self.central_widget.setObjectName("centralwidget")

        self.video.setFont(font)
        self.video.setGeometry(QtCore.QRect(30, 30, 761, 761))
        self.video.setStyleSheet("QLabel#video {\n"
                                 "    background-color: #242526;\n"
                                 "    border-radius: 20px;\n"
                                 "    color: white;\n"
                                 "}")
        self.video.setText("                      Opening Camera ...")
        self.video.setObjectName("video")

        self.user_picture.setGeometry(QtCore.QRect(920, 10, 151, 151))
        self.user_picture.setStyleSheet("QLabel#user_picture {\n"
                                        "    background-color: white;\n"
                                        "    border-radius: 75px;\n"
                                        "}")
        self.user_picture.setScaledContents(True)
        self.user_picture.setObjectName("user_picture")

        self.label_name.setGeometry(QtCore.QRect(820, 250, 351, 41))

        font.setPointSize(10)
        self.label_name.setFont(font)
        self.label_name.setStyleSheet("QLabel#label_name {\n"
                                      "    background-color: #242526;\n"
                                      "    border-radius: 10px;\n"
                                      "    color: white;\n"
                                      "}")
        self.label_name.setObjectName("label_name")
        self.label_age.setGeometry(QtCore.QRect(820, 310, 161, 41))

        self.label_age.setFont(font)
        self.label_age.setStyleSheet("QLabel#label_age {\n"
                                     "    background-color: #242526;\n"
                                     "    border-radius: 10px;\n"
                                     "    color: white;\n"
                                     "}")
        self.label_age.setObjectName("label_age")
        self.label_sex.setGeometry(QtCore.QRect(1010, 310, 161, 41))

        self.label_sex.setFont(font)
        self.label_sex.setStyleSheet("QLabel#label_sex {\n"
                                     "    background-color: #242526;\n"
                                     "    border-radius: 10px;\n"
                                     "    color: white;\n"
                                     "}")
        self.label_sex.setObjectName("label_sex")
        self.label_id.setGeometry(QtCore.QRect(820, 190, 351, 41))

        self.textBrowser_noti.setGeometry(QtCore.QRect(820, 370, 351, 81))
        self.textBrowser_noti.setFont(font)
        self.textBrowser_noti.setStyleSheet("QTextBrowser#textBrowser_noti {\n"
                                            "    background-color: #242526;\n"
                                            "    border-radius: 20px;\n"
                                            "    color: white;\n"
                                            "}")
        self.textBrowser_noti.setObjectName("textBrowser_noti")

        self.label_id.setFont(font)
        self.label_id.setStyleSheet("QLabel#label_id {\n"
                                    "    background-color: #242526;\n"
                                    "    border-radius: 10px;\n"
                                    "    color: white;\n"
                                    "}")
        self.label_id.setObjectName("label_id")

        self.label_qrcode.setGeometry(QtCore.QRect(840, 470, 301, 301))
        self.label_qrcode.setStyleSheet("QLabel#label_qrcode{\n"
                                        "    background-color: #242526;\n"
                                        "}")
        self.label_qrcode.setScaledContents(True)
        self.label_qrcode.setObjectName("label_qrcode")
        self.label_author.setGeometry(QtCore.QRect(1020, 790, 171, 21))
        self.label_qrcode.setPixmap(QPixmap('QR.png'))

        font = QtGui.QFont()
        font.setFamily("MV Boli")
        self.label_author.setFont(font)
        self.label_author.setStyleSheet("QLabel#label_author {\n"
                                        "    background-color: #242526;\n"
                                        "    border-radius: 2px;\n"
                                        "    color: white;\n"
                                        "}")
        self.label_author.setObjectName("label_author")

        Main_Window.setCentralWidget(self.central_widget)

        self.retranslateUi(Main_Window)
        QtCore.QMetaObject.connectSlotsByName(Main_Window)

        # Live video
        self.thread.changePixmap.connect(self.update_image)
        self.thread.changeID.connect(self.update)
        self.thread.changeStateQrcode.connect(self.changeState)
        self.thread.start()

    def retranslateUi(self, Main_Window):
        _translate = QtCore.QCoreApplication.translate
        Main_Window.setWindowTitle(_translate("MainWindow", "Checking"))
        self.label_name.setText(_translate("MainWindow", " Name:"))
        self.label_age.setText(_translate("MainWindow", " Age:"))
        self.label_sex.setText(_translate("MainWindow", " Sex:"))
        self.label_id.setText(_translate("MainWindow", " ID: "))
        self.label_author.setText(_translate("MainWindow", "  Author: Tran Tuan Thanh"))
        self.textBrowser_noti.setHtml(_translate("MainWindow",
                                                 "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                                 "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n "
                                                 "<html><head><meta name=\"qrichtext\" content=\"1\" /><style "
                                                 "type=\"text/css\">\n "
                                                 "p, li { white-space: pre-wrap; }\n"
                                                 "</style></head><body style=\" font-family:\'MV Boli\'; "
                                                 "font-size:10pt; font-weight:400; font-style:normal;\">\n "
                                                 "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; "
                                                 "margin-left:0px; margin-right:0px; -qt-block-indent:0; "
                                                 "text-indent:0px;\">Vui lòng quét khuôn mặt để nhận diện "
                                                 "!!</p></body></html>"))

    @pyqtSlot(str, name='state')
    def changeState(self, state):
        self.textBrowser_noti.setText(state)

    @pyqtSlot(np.ndarray, name='video')
    def update_image(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img, 1000, 1000)
        self.video.setPixmap(qt_img)

    @pyqtSlot(str, name='id')
    def update(self, identify):
        self.label_id.setText(" ID: {}".format(identify))
        self.textBrowser_noti.setHtml("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                      "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n "
                                      "<html><head><meta name=\"qrichtext\" content=\"1\" /><style "
                                      "type=\"text/css\">\n "
                                      "p, li { white-space: pre-wrap; }\n"
                                      "</style></head><body style=\" font-family:\'MV Boli\'; "
                                      "font-size:10pt; font-weight:400; font-style:normal;\">\n "
                                      "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; "
                                      "margin-left:0px; margin-right:0px; -qt-block-indent:0; "
                                      "text-indent:0px;\">Vui lòng quét mã QR để khai báo y tế "
                                      "!!</p></body></html>")
        if identify == "unknown":
            avatar = QPixmap('Unknown/Unknown_picture.jpg')
            self.user_picture.setPixmap(avatar)
            self.label_name.setText(" Name: Unknown")
        else:
            response = requests.get(URL + f"user/{identify}")
            result = response.json()
            self.label_name.setText(f" Name: {result['name']}")
            self.label_age.setText(f" Age: {result['age']}")
            self.label_sex.setText(f" Sex: {result['sex']}")
            avatar = QPixmap('Recognition/user_recognition.jpg')
            self.user_picture.setPixmap(avatar)

    def convert_cv_qt(self, cv_img, weights, height):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(weights, height, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
